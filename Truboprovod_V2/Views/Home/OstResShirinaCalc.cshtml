
@{
    ViewBag.Title = "Расчет";
    Layout = "~/Views/Shared/_Layout.cshtml";
    @model Truboprovod_V2.Models.OstResShirinaModel
}

@{
    List<SelectListItem> Sredalist = new List<SelectListItem>();
    Sredalist.Add(new SelectListItem() { Selected = true, Value = "I", Text = "Токсичные, горючие, взрывоопасные и сжиженные газы" });
    Sredalist.Add(new SelectListItem() { Value = "II", Text = "инертные газы или токсичные, горючие, взрывоопасные жидкости" });
    Sredalist.Add(new SelectListItem() { Value = "III", Text = "инертные жидкости" });
}

@{
    List<SelectListItem> Material = new List<SelectListItem>();
    Material.Add(new SelectListItem() { Selected = true, Value = "1", Text = "Бесшовные трубы из углеродистой стали" });
    Material.Add(new SelectListItem() { Value = "2", Text = "Сварные трубы из углеродистой стали" });
    Material.Add(new SelectListItem() { Value = "3", Text = "Сварные трубы из низколегированной ненормализованной стали" });
    Material.Add(new SelectListItem() { Value = "4", Text = "Сварных трубы из нормализованной низколегированной стали" });

}

@{
    List<SelectListItem> SteelList = new List<SelectListItem>();
    SteelList.Add(new SelectListItem() { Selected = true, Value = "10", Text = "10" });
    SteelList.Add(new SelectListItem() { Value = "20", Text = "20" });
    SteelList.Add(new SelectListItem() { Value = "35", Text = "35" });
    SteelList.Add(new SelectListItem() { Value = "45", Text = "45" });
    SteelList.Add(new SelectListItem() { Value = "10Г2", Text = "10Г2" });
    SteelList.Add(new SelectListItem() { Value = "15ХМ", Text = "15ХМ" });
    SteelList.Add(new SelectListItem() { Value = "30ХМА", Text = "30ХМА" });
    SteelList.Add(new SelectListItem() { Value = "12ХН2", Text = "12ХН2" });
    SteelList.Add(new SelectListItem() { Value = "Ст4сп", Text = "Ст4сп" });
    SteelList.Add(new SelectListItem() { Value = "Ст5сп", Text = "Ст5сп" });
}

<h1>Расчёт остаточного ресурса трубопровода по минимальной вероятной толщине стенки труб по результатам диагностики</h1>



@using (Html.BeginForm())
{
    <div class="row res-main-func">
        <div class="col-md-2  ">
                    <input type="submit" value="Считать" class="btn btn-default" />
        </div>
        <div class=" col-md-4">
            @Html.LabelFor(model => model.OstResult, htmlAttributes: new { @class = " col-md-4 " })
            <input type="text" value="@ViewBag.Shirinaresult " readonly />
            @Html.Raw(@Html.ActionLink("[replacetext]", "ToShirinaPdfRotativa", "Home", new { area = "" }).ToHtmlString().Replace("[replacetext]", "<img src =\"/fonts/document-print.png\"/>"))

        </div>

    </div>
    <br />

    <div class="row main-func-style">
        <div class="col-md-6 ">
            <ul>
                <li>
                    @Html.LabelFor(model => model.Sreda)
                </li>
                <li>
                    @Html.DropDownListFor(model => model.Sreda, Sredalist)
                    @Html.ValidationMessageFor(model => model.Sreda)
                </li>

                <li>
                    @Html.LabelFor(model => model.Material)
                </li>
                <li>
                    @Html.DropDownListFor(model => model.Material, Material)
                    @Html.ValidationMessageFor(model => model.Material)
                </li>

                <li>
                    @Html.LabelFor(model => model.Steel)
                </li>
                <li>
                    @Html.DropDownListFor(model => model.Steel, SteelList)
                    @Html.ValidationMessageFor(model => model.Steel)
                </li>


                <li>
                    @Html.LabelFor(model => model.P)
                </li>
                <li>
                    @Html.EditorFor(model => model.P)
                    @Html.ValidationMessageFor(m => m.P)
                </li>

                <li>
                    @Html.LabelFor(model => model.Nominal_tolshina)
                </li>
                <li>
                    @Html.EditorFor(model => model.Nominal_tolshina)
                    @Html.ValidationMessageFor(m => m.Nominal_tolshina)
                </li>

                <li>
                    @Html.LabelFor(model => model.Diametr)
                </li>
                <li>
                    @Html.EditorFor(model => model.Diametr)
                    @Html.ValidationMessageFor(m => m.Diametr)
                </li>



                <li>
                    @Html.LabelFor(model => model.Narabotka)
                </li>
                <li>
                    @Html.EditorFor(model => model.Narabotka)
                    @Html.ValidationMessageFor(m => m.Narabotka)
                </li>
            </ul>
        </div>

        <div class="col-md-6 frame">
            @Html.Label("Для точности расчета необходимо минимум 10 замеров!")
            <div class="col-md-10" id="DynamicExtraFieldsContainer">

            </div>
            <div class="col-md-offset-10">

                <img width="100" height="100" src="~/fonts/zamer.bmp" />
            </div>

        </div>

        <div id="addDynamicField" class="col-md-offset-6 frame">
            <input type="button" id="addDynamicExtraFieldButton" value="Добавить замер" class="btn btn-success btn-add">
        </div>
    </div>


}

@section Scripts{

    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $('#addDynamicExtraFieldButton').click(function (event) {
            addDynamicExtraField();
            return false;
        });
        function addDynamicExtraField() {
            var div = $('<div />', {
                'class': 'DynamicExtraField zamer-element',

            }).appendTo($('#DynamicExtraFieldsContainer'));

            // var br = $('<br />').appendTo(div);

            var text = $('<input />', {
                name: 'DynamicExtraField[]',
                type: 'text',
                id: 'zamer',
                hint: '1'
            }).appendTo(div);
            var text = $('<input />', {
                name: 'DynamicExtraField[]',
                type: 'text',
                id: 'zamer'
            }).appendTo(div);
            var text = $('<input />', {
                name: 'DynamicExtraField[]',
                type: 'text',
                id: 'zamer'
            }).appendTo(div);
            var text = $('<input />', {
                name: 'DynamicExtraField[]',
                type: 'text',
                id: 'zamer'
            }).appendTo(div);

            var input = $('<input />', {
                value: 'Удалить',
                type: 'button',
                'class': 'DeleteDynamicExtraField btn btn-danger ',

            }).appendTo(div);
            input.click(function () {
                $(this).parent().remove();
            });
        }
        //Для удаления первого поля
        $('.DeleteDynamicExtraField').click(function (event) {
            $(this).parent().remove();
            return false;


        });


    </script>

    <script>

        $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(".", ",");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        }

        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        }
    </script>
}




@{
    ViewBag.Title = "Расчет";
    Layout = "~/Views/Shared/_Layout.cshtml";
    @model Truboprovod_V2.Models.OstResOtkazModel
}

<h2>Расчет остаточного ресурса по статистике отказов трубопроводов</h2>

@{ List<SelectListItem> list = new List<SelectListItem>();
    list.Add(new SelectListItem() { Selected = true, Text = " ------" });
    list.Add(new SelectListItem() { Value = "222", Text = " транспортирующий сероводородсодержащие продукты" });
    list.Add(new SelectListItem() { Value = "1", Text = " транспортирующий не сероводородсодержащие продукты" });
}

@{
    List<SelectListItem> CategoryList = new List<SelectListItem>();
    CategoryList.Add(new SelectListItem() { Selected = true, Value = "1", Text = " I  " });
    CategoryList.Add(new SelectListItem() { Value = "2", Text = " II  " });
    CategoryList.Add(new SelectListItem() { Value = "3", Text = " III " });
}

@{
    List<SelectListItem> MaterialList = new List<SelectListItem>();
    MaterialList.Add(new SelectListItem()
    {
        Selected = true,
        Value = "1",
        Text = "Сварные из малоперлитной и бейнитной стали контролируемой прокатки и \n" +
                "термически упрочненные трубы, изготовленные двусторонней электродуговой\n " +
                "сваркой под флюсом по сплошному технологическому шву, с минусовым допуском\n" +
                " по толщине стенки не более 5% и прошедшие 100%-ный контроль на сплошность\n" +
                " основного металла и сварных соединений неразрушающими методами"
    });
    MaterialList.Add(new SelectListItem()
    {
        Value = "2",
        Text = "Сварные из нормализованной, термически упрочненной стали и стали контролируемой прокатки, " +
                "изготовленные двусторонней электродуговой сваркой под флюсом по сплошному технологическому шву и " +
                "прошедшие 100%-ный контроль сварных соединений неразрушающими методами." +
                " Бесшовные из катаной или кованой заготовки, " +
                "прошедшие 100%-ный контроль неразрушающими методами  "
    });
    MaterialList.Add(new SelectListItem()
    {
        Value = "3",
        Text = "Сварные из нормализованной и горячекатаной низколегированной стали, изготовленные двусторонней " +
                  "электродуговой сваркой и прошедшие 100%-ный контроль сварных соединений неразрушающими методами "
    });
    MaterialList.Add(new SelectListItem()
    {
        Value = "4",
        Text = "Сварные из горячекатаной низколегированной или углеродистой стали," +
                " изготовленные двусторонней электродуговой сваркой или токами высокой частоты. Остальные бесшовные трубы"
    });


}


@using (Ajax.BeginForm(new AjaxOptions
{
    HttpMethod = "post",
    InsertionMode = InsertionMode.Replace,
    UpdateTargetId = "conteiner"
}))
{
    <div class="row res-main-func">
        <div class="col-md-4  ">
            <input type="submit" value="Считать" class="btn btn-default" />
        </div>
        <div>
            @Html.LabelFor(model => model.result, htmlAttributes: new { @class = " col-md-4 " })
        </div>
        <div id="conteiner" class=" col-md-4">
            <input type="text" value="@ViewBag.result " readonly />
        </div>
        <br />

    </div>
    <br />
    <div class="row main-func-style">

        <div class="col-md-6">
            <ul>
                <li>
                    @Html.LabelFor(model => model.serovodorod)
                </li>
                <li>
                    @Html.DropDownListFor(md => md.serovodorod, list, new { @id = "otherFieldOption" })
                </li>
                <li>
                    @Html.LabelFor(model => model.Yf)
                </li>
                <li>
                    @Html.EditorFor(model => model.Yf)
                    @Html.ValidationMessageFor(model => model.Yf, "", new { @class = "text-danger" })
                </li>

                <li>
                    @Html.LabelFor(model => model.m2)
                </li>
                <li>
                    @Html.DropDownListFor(model => model.m2, CategoryList)
                    @Html.ValidationMessageFor(model => model.m2, "", new { @class = "text-danger" })
                </li>

                <li>
                    @Html.LabelFor(model => model.Diametr)
                </li>
                <li>
                    @Html.EditorFor(model => model.Diametr)
                    @Html.ValidationMessageFor(model => model.Diametr, "", new { @class = "text-danger" })
                </li>

                <li>
                    @Html.LabelFor(model => model.R1)
                </li>
                <li>
                    @Html.EditorFor(model => model.R1)
                    @Html.ValidationMessageFor(model => model.R1, "", new { @class = "text-danger" })
                <li>
                    @Html.LabelFor(model => model.R2)
                </li>
                <li>
                    @Html.EditorFor(model => model.R2)
                    @Html.ValidationMessageFor(model => model.R2, "", new { @class = "text-danger" })
                </li>

                <li>
                    @Html.LabelFor(model => model.P)
                </li>
                <li>
                    @Html.EditorFor(model => model.P)
                    @Html.ValidationMessageFor(model => model.P, "", new { @class = "text-danger" })
                </li>

                <li>
                    @Html.LabelFor(model => model.SkorostIznosa)
                </li>
                <li>
                    @Html.EditorFor(model => model.SkorostIznosa)
                    @Html.ValidationMessageFor(model => model.SkorostIznosa, "", new { @class = "text-danger" })
                </li>
            </ul>
        </div>


        <div class="col-md-offset-6">
            <ul>
                @*<li>
                        @Html.LabelFor(model => model.Ys)
                    </li>

                    <li>
                        @Html.EditorFor(model => model.Ys, new { htmlAttributes = new { @name = "otherField" } })
                        @Html.ValidationMessageFor(model => model.Ys, "", new { @class = "text-danger" })
                    </li>*@

                <li>
                    @Html.LabelFor(model => model.Yn)
                </li>
                <li>
                    @Html.EditorFor(model => model.Yn)
                    @Html.ValidationMessageFor(model => model.Yn, "", new { @class = "text-danger" })
                </li>

                <li>
                    @Html.LabelFor(model => model.Harakterisika)
                </li>
                <li>
                    @Html.DropDownListFor(model => model.Harakterisika, MaterialList)
                    @Html.ValidationMessageFor(model => model.Harakterisika, "", new { @class = "text-danger" })
                </li>

                <li>
                    @Html.LabelFor(model => model.Prognoz)
                </li>
                <li>
                    @Html.EditorFor(model => model.Prognoz)
                    @Html.ValidationMessageFor(model => model.Prognoz, "", new { @class = "text-danger" })
                </li>

                <li>
                    @Html.LabelFor(model => model.TolshinaStenki)
                </li>
                <li>
                    @Html.EditorFor(model => model.TolshinaStenki)
                    @Html.ValidationMessageFor(model => model.TolshinaStenki, "", new { @class = "text-danger" })
                </li>

                <li>
                    @Html.LabelFor(model => model.Narabotka)
                </li>
                <li>
                    @Html.EditorFor(model => model.Narabotka)
                    @Html.ValidationMessageFor(model => model.Narabotka, "", new { @class = "text-danger" })
                </li>

                <li>
                    @Html.LabelFor(model => model.Elements)
                </li>
                <li>
                    @Html.EditorFor(model => model.Elements)
                    @Html.ValidationMessageFor(model => model.Elements, "", new { @class = "text-danger" })
                </li>

                <li>
                    @Html.LabelFor(model => model.Dlinna)
                </li>
                <li>
                    @Html.EditorFor(model => model.Dlinna)
                    @Html.ValidationMessageFor(model => model.Dlinna, "", new { @class = "text-danger" })
                </li>

                <li>
                    @Html.LabelFor(model => model.BrokenEl)
                </li>
                <li>
                    @Html.EditorFor(model => model.BrokenEl)
                    @Html.ValidationMessageFor(model => model.BrokenEl, "", new { @class = "text-danger" })
                </li>
            </ul>
        </div>
    </div>

}


@section Scripts {

    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    @Scripts.Render("~/bundles/jqueryval")


    <script>

        $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(".", ",");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        }

        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        }
    </script>
}





